name: Build Test

# PR 및 main/develop 브랜치에 수동으로 빌드 테스트 실행
on:
  workflow_dispatch:
    inputs:
      platform:
        description: '빌드 테스트할 플랫폼'
        required: true
        default: 'both'
        type: choice
        options:
          - android
          - ios
          - both

jobs:
  # Android APK 빌드 테스트
  build-android:
    name: Android APK Build Test
    runs-on: ubuntu-latest
    if: github.event.inputs.platform == 'android' || github.event.inputs.platform == 'both'

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Java 환경 설정
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      # 3. Flutter SDK 설치
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.3'
          channel: 'stable'
          cache: true

      # 4. 의존성 설치
      - name: Install dependencies
        run: flutter pub get

      # 5. 코드 생성
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs

      # 6. 더미 환경 변수 파일 생성 (빌드 테스트용)
      - name: Create .env file
        run: |
          cat > .env << EOF
          GOOGLE_IOS_CLIENT_ID=test-ios-client.apps.googleusercontent.com
          GOOGLE_WEB_CLIENT_ID=test-web-client.apps.googleusercontent.com
          GOOGLE_WEB_CLIENT_SECRET=GOCSPX-test-secret
          EOF

      # 7. Android APK 빌드 (Release 모드)
      - name: Build Android APK
        run: flutter build apk --release

      # 8. 빌드 결과 업로드 (다운로드 가능)
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7

  # iOS IPA 빌드 테스트 (서명 없이 빌드만 테스트)
  build-ios:
    name: iOS Build Test
    runs-on: macos-latest
    if: github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'both'

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Flutter SDK 설치
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.3'
          channel: 'stable'
          cache: true

      # 3. 의존성 설치
      - name: Install dependencies
        run: flutter pub get

      # 4. 코드 생성
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs

      # 5. 더미 환경 변수 파일 생성
      - name: Create .env file
        run: |
          cat > .env << EOF
          GOOGLE_IOS_CLIENT_ID=test-ios-client.apps.googleusercontent.com
          GOOGLE_WEB_CLIENT_ID=test-web-client.apps.googleusercontent.com
          GOOGLE_WEB_CLIENT_SECRET=GOCSPX-test-secret
          EOF

      # 6. CocoaPods 의존성 설치
      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      # 7. iOS 빌드 테스트 (서명 없이)
      - name: Build iOS (No Code Sign)
        run: flutter build ios --release --no-codesign

      # 8. 빌드 성공 메시지
      - name: Build Success
        run: echo "✅ iOS 빌드 테스트 성공! (서명 없음)"
